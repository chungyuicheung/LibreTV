!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).OpenCC={})}(this,function(e){"use strict";var t={};const n={from:t,to:t},r=async e=>{const[t,n]=e.split("."),r=await fetch(`https://cdn.jsdelivr.net/npm/opencc-data@1.0.5/${t}/${n}.json`),s=await r.json();return s.map(([e,t])=>[e,t.split(" ")])},s=new Map;function a(e,t){const n=new Map;for(const[r,s]of e)for(const e of s){const s=n.get(e)||[];s.push(r),n.set(e,s)}const r=Array.from(n.keys()).sort(((e,t)=>t.length-e.length));return t=>{let s=0;const a=[];for(;s<t.length;){let i=!1;for(const o of r)if(t.slice(s).startsWith(o)){a.push(e.get(n.get(o)[0])[0]),s+=o.length,i=!0;break}i||(a.push(t[s]),s+=1)}return a.join("")}}e.Converter=function({from:e,to:t}){const i=n.from[e],o=n.to[t];if(void 0===i||void 0===o)throw new Error("Invalid conversion method");const c=[];for(let e=i;e<o;e+=1)c.push(r(t[e]));return Promise.all(c).then((e=>{const t=new Map(e.flat());return a(t)}))},e.CustomConverter=function(e){const t=new Map(e);return a(t)},e.Locale=n,e.version="1.0.5",Object.defineProperty(e,"__esModule",{value:!0})});